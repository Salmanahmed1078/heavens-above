name: Deploy to Vercel

on:
  push:
    branches: [ main ]
  workflow_dispatch:

permissions:
  contents: read

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          check-latest: true

      - name: Install dependencies (if any)
        run: |
          if [ -f package-lock.json ]; then
            npm ci --no-audit --no-fund
          elif [ -f package.json ]; then
            npm install --no-audit --no-fund
          else
            echo "No package.json found; skipping install."
          fi

      - name: Build data (with logging)
        run: |
          export TZ=Asia/Karachi
          if [ -f run.js ]; then
            set -o pipefail || true
            echo "Starting data scrape at $(date)"
            node run.js 2>&1 | tee scrape.log || { echo "WARNING: run.js exited with non-zero code"; }
            echo "Data build completed at $(date). Checking public/data..."
            if [ -d public/data ]; then
              echo "✓ public/data directory exists"
              echo "Files in public/data:"
              ls -lah public/data/ | head -20
              echo "Total files: $(find public/data -type f | wc -l)"
              echo "Total size: $(du -sh public/data | cut -f1)"
            else
              echo "✗ WARNING: public/data directory not found after run.js"
            fi
            if [ -f scrape.log ]; then
              echo "Scrape log tail (last 50 lines):"
              tail -50 scrape.log || true
            fi
          else
            echo "run.js not found; skipping data build."
          fi

      - name: Include docs into public
        run: |
          mkdir -p public/docs
          if [ -d docs ]; then rsync -a --delete docs/ public/docs/; fi

      - name: Verify public directory structure
        run: |
          echo "Contents of public/:"
          ls -la public/ || echo "public/ directory does not exist"
          echo ""
          echo "Contents of public/data/:"
          ls -la public/data/ 2>/dev/null || echo "public/data/ directory does not exist"

      - name: Upload scrape artifacts for debugging
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: scrape-output-${{ github.run_number }}
          path: |
            scrape.log
            public/data/**
          if-no-files-found: warn
          retention-days: 7

      - name: Commit and push data to GitHub
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          if [ -d public/data ] && [ -n "$(ls -A public/data 2>/dev/null)" ]; then
            echo "Committing scraped data to repository..."
            git config --local user.email "github-actions[bot]@users.noreply.github.com"
            git config --local user.name "github-actions[bot]"
            git add public/data/ || true
            if git diff --staged --quiet; then
              echo "No changes to commit in public/data/"
            else
              git commit -m "Update scraped data [skip ci]" || echo "No changes to commit"
              git push origin main || echo "Push failed or no changes"
            fi
          else
            echo "No data files to commit (public/data/ is empty or missing)"
          fi

      - name: Install Vercel CLI
        run: npm i -g vercel@latest

      - name: Show files to be deployed
        run: |
          echo "Files in public/ that will be deployed:"
          find public -type f | head -20 || echo "No files found in public/"
          echo ""
          echo "Total size of public/:"
          du -sh public/ || echo "public/ does not exist"

      - name: Check Vercel secrets
        run: |
          if [ -z "${{ secrets.VERCEL_TOKEN }}" ]; then
            echo "❌ ERROR: VERCEL_TOKEN secret is not set!"
            echo "Please add VERCEL_TOKEN to repository secrets at:"
            echo "https://github.com/${{ github.repository }}/settings/secrets/actions"
            exit 1
          fi
          if [ -z "${{ secrets.VERCEL_PROJECT_ID }}" ]; then
            echo "⚠️  WARNING: VERCEL_PROJECT_ID is not set. Deploy may fail."
          fi
          echo "✓ Vercel secrets are configured"

      - name: Verify Vercel CLI access
        env:
          VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
        run: |
          echo "Verifying Vercel CLI authentication..."
          vercel whoami --token "$VERCEL_TOKEN" || {
            echo "❌ Vercel authentication failed. Please check your VERCEL_TOKEN secret."
            exit 1
          }
          echo "✅ Vercel authentication successful"

      - name: Vercel deploy (production)
        id: vercel
        env:
          VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
          VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
          VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}
        run: |
          echo "Deploying to Vercel..."
          ARGS=(--prod --yes --token "$VERCEL_TOKEN")
          
          # Provide project ID if available
          if [ -n "$VERCEL_PROJECT_ID" ]; then
            ARGS+=(--project "$VERCEL_PROJECT_ID")
            echo "Using project ID: $VERCEL_PROJECT_ID"
          else
            echo "⚠️  WARNING: VERCEL_PROJECT_ID not set. Vercel may create a new project."
          fi
          
          # Provide scope if available (optional for personal accounts)
          if [ -n "$VERCEL_ORG_ID" ]; then
            ARGS+=(--scope "$VERCEL_ORG_ID")
            echo "Using org ID: $VERCEL_ORG_ID"
          fi
          
          echo "Working directory: $(pwd)"
          echo "Public directory contents:"
          ls -la public/ || echo "public/ directory not found"
          echo ""
          echo "Deploy command: vercel deploy ${ARGS[@]}"
          echo ""
          
          # Run deploy and capture both stdout and stderr
          set +e  # Don't exit on error immediately
          DEPLOY_OUTPUT=$(vercel deploy "${ARGS[@]}" 2>&1)
          DEPLOY_EXIT_CODE=$?
          set -e  # Re-enable exit on error
          
          echo "=== Vercel Deploy Output ==="
          echo "$DEPLOY_OUTPUT"
          echo "============================"
          echo ""
          
          if [ $DEPLOY_EXIT_CODE -ne 0 ]; then
            echo "❌ Vercel deployment failed with exit code: $DEPLOY_EXIT_CODE"
            echo ""
            echo "Common issues to check:"
            echo "1. VERCEL_TOKEN is valid and has deployment permissions"
            echo "2. VERCEL_PROJECT_ID matches your Vercel project"
            echo "3. Project exists in your Vercel account"
            echo "4. Token has access to the project/org"
            exit 1
          fi
          
          DEPLOY_URL=$(echo "$DEPLOY_OUTPUT" | grep -Eo 'https://[^ ]+vercel\.app' | tail -n1)
          if [ -n "$DEPLOY_URL" ]; then
            echo "url=$DEPLOY_URL" >> $GITHUB_OUTPUT
            echo "✅ Deployment successful: $DEPLOY_URL"
          else
            echo "⚠️  Could not extract deployment URL from output, but deploy may have succeeded"
            echo "Check Vercel dashboard for deployment status"
          fi

      - name: Output deployment URL
        run: echo "Vercel URL: ${{ steps.vercel.outputs.url }}"


