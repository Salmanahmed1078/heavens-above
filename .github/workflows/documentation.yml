name: Documentation Build and Publish to GitHub Pages

on:
  push:
    paths:
      - 'docs/**'
  workflow_dispatch:

permissions:
  contents: read
  pages: write
  id-token: write

concurrency:
  group: pages-docs
  cancel-in-progress: true

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure Pages
        uses: actions/configure-pages@v5

      - name: Build docs
        run: |
          mkdir -p docs-output
          
          if [ -f docs/_config.yml ] || [ -f docs/Gemfile ]; then
            echo "Jekyll configuration detected; building with Jekyll."
            sudo apt-get update && sudo apt-get install -y ruby-full build-essential zlib1g-dev
            gem install bundler jekyll
            (cd docs && bundle init >/dev/null 2>&1 || true)
            (cd docs && jekyll build -s . -d ../docs-output)
            echo "‚úÖ Jekyll build completed"
          elif [ -d docs ]; then
            echo "No Jekyll config; copying raw docs directory."
            rsync -a --delete docs/ docs-output/
            
            # Create a proper index.html
            if [ ! -f docs-output/index.html ]; then
              echo "Creating index.html..."
              {
                echo '<!DOCTYPE html>'
                echo '<html lang="en">'
                echo '<head>'
                echo '  <meta charset="UTF-8">'
                echo '  <meta name="viewport" content="width=device-width, initial-scale=1.0">'
                echo '  <title>Documentation - Heavens Above</title>'
                echo '  <style>'
                echo '    body { font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, sans-serif; line-height: 1.6; max-width: 800px; margin: 0 auto; padding: 20px; background: #f5f5f5; }'
                echo '    .container { background: white; padding: 30px; border-radius: 8px; box-shadow: 0 2px 4px rgba(0,0,0,0.1); }'
                echo '    h1 { color: #333; border-bottom: 2px solid #007acc; padding-bottom: 10px; }'
                echo '    .file-list { list-style: none; padding: 0; }'
                echo '    .file-list li { padding: 10px; margin: 5px 0; background: #f9f9f9; border-radius: 4px; }'
                echo '    .file-list a { color: #007acc; text-decoration: none; font-weight: 500; }'
                echo '    .file-list a:hover { text-decoration: underline; }'
                echo '    .meta { color: #666; font-size: 0.9em; margin-top: 20px; }'
                echo '  </style>'
                echo '</head>'
                echo '<body>'
                echo '  <div class="container">'
                echo '    <h1>üìö Documentation</h1>'
                echo '    <p>Welcome to the Heavens Above project documentation.</p>'
                echo '    <h2>Available Documents</h2>'
                echo '    <ul class="file-list">'
              } > docs-output/index.html
              
              # Add links to all HTML files (prefer .html over .md)
              for file in docs-output/*.html 2>/dev/null; do
                if [ -f "$file" ]; then
                  filename=$(basename "$file")
                  displayname=$(echo "$filename" | sed 's/\.html$//')
                  echo "      <li><a href=\"$filename\">$displayname</a></li>" >> docs-output/index.html
                fi
              done
              # Add links to markdown files that don't have HTML versions
              for file in docs-output/*.md 2>/dev/null; do
                if [ -f "$file" ]; then
                  filename=$(basename "$file")
                  htmlname="${filename%.md}.html"
                  if [ ! -f "docs-output/$htmlname" ]; then
                    displayname=$(echo "$filename" | sed 's/\.md$//')
                    echo "      <li><a href=\"$filename\">$displayname</a> (Markdown)</li>" >> docs-output/index.html
                  fi
                fi
              done
              
              {
                echo '    </ul>'
                echo '    <div class="meta">'
                echo '      <p><strong>Heavens Above</strong> - Astronomical data scraping and visualization</p>'
                echo '      <p>Documentation deployed via GitHub Actions</p>'
                echo '    </div>'
                echo '  </div>'
                echo '</body>'
                echo '</html>'
              } >> docs-output/index.html
              echo "‚úÖ index.html created"
            fi
            
            # Convert README.md to README.html if it exists
            if [ -f docs-output/README.md ]; then
              echo "Converting README.md to HTML..."
              # First convert markdown to HTML content
              MARKDOWN_CONTENT=$(cat docs-output/README.md)
              HTML_CONTENT=$(echo "$MARKDOWN_CONTENT" | sed \
                -e 's/^# \(.*\)/<h1>\1<\/h1>/' \
                -e 's/^## \(.*\)/<h2>\1<\/h2>/' \
                -e 's/^### \(.*\)/<h3>\1<\/h3>/' \
                -e 's/^#### \(.*\)/<h4>\1<\/h4>/' \
                -e 's/\*\*\([^*]*\)\*\*/<strong>\1<\/strong>/g' \
                -e 's/`\([^`]*\)`/<code>\1<\/code>/g' \
                -e 's/\[\([^\]]*\)\](\([^)]*\))/<a href="\2">\1<\/a>/g' \
                -e 's/^\([^<].*\)$/<p>\1<\/p>/' \
                || echo "$MARKDOWN_CONTENT")
              
              {
                echo '<!DOCTYPE html>'
                echo '<html lang="en">'
                echo '<head>'
                echo '  <meta charset="UTF-8">'
                echo '  <meta name="viewport" content="width=device-width, initial-scale=1.0">'
                echo '  <title>README - Documentation</title>'
                echo '  <style>'
                echo '    body { font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, sans-serif; line-height: 1.6; max-width: 900px; margin: 0 auto; padding: 20px; background: #f5f5f5; }'
                echo '    .container { background: white; padding: 30px; border-radius: 8px; box-shadow: 0 2px 4px rgba(0,0,0,0.1); }'
                echo '    pre { background: #f4f4f4; padding: 15px; border-radius: 4px; overflow-x: auto; }'
                echo '    code { background: #f4f4f4; padding: 2px 6px; border-radius: 3px; font-family: "Monaco", "Courier New", monospace; }'
                echo '    a { color: #007acc; text-decoration: none; }'
                echo '    a:hover { text-decoration: underline; }'
                echo '    h1, h2, h3, h4 { color: #333; }'
                echo '  </style>'
                echo '</head>'
                echo '<body>'
                echo '  <div class="container">'
                echo '    <a href="index.html">‚Üê Back to Documentation</a>'
                echo '    <hr>'
              } > docs-output/README.html
              # Append converted HTML content
              echo "$HTML_CONTENT" >> docs-output/README.html
              {
                echo '  </div>'
                echo '</body>'
                echo '</html>'
              } >> docs-output/README.html
              echo "‚úÖ README.html created"
            fi
            
            echo "‚úÖ Raw docs copied and converted"
          else
            echo "‚ö†Ô∏è  No docs/ directory found. Creating placeholder."
            echo "# Documentation" > docs-output/README.md
            {
              echo '<!DOCTYPE html>'
              echo '<html lang="en">'
              echo '<head>'
              echo '  <meta charset="UTF-8">'
              echo '  <meta name="viewport" content="width=device-width, initial-scale=1.0">'
              echo '  <title>Documentation</title>'
              echo '</head>'
              echo '<body>'
              echo '  <h1>Documentation</h1>'
              echo '  <p>Documentation is being set up. Please add files to the <code>docs/</code> directory.</p>'
              echo '</body>'
              echo '</html>'
            } > docs-output/index.html
          fi
          
          echo ""
          echo "=== Contents of docs-output ==="
          ls -lah docs-output/ || echo "docs-output directory not created"
          echo ""
          echo "Total files: $(find docs-output -type f 2>/dev/null | wc -l)"
          echo "Files:"
          find docs-output -type f 2>/dev/null | head -10

      - name: Upload Pages artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: docs-output

  deploy:
    needs: build
    runs-on: ubuntu-latest
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4


